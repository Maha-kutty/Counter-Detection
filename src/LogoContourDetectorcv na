import { useState, useRef } from 'react';
import { Upload, Image as ImageIcon, SlidersHorizontal, Download, Scan } from 'lucide-react';
import { ContourDetector, Contour } from '../utils/contourDetection';

export default function LogoContourDetector() {
  const [originalImage, setOriginalImage] = useState<string | null>(null);
  const [processedImage, setProcessedImage] = useState<string | null>(null);
  const [contours, setContours] = useState<Contour[]>([]);
  const [threshold, setThreshold] = useState(128);
  const [isProcessing, setIsProcessing] = useState(false);
  const [fileName, setFileName] = useState<string>('');
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    if (!file.type.startsWith('image/')) {
      alert('Please select an image file');
      return;
    }

    setFileName(file.name);
    setIsProcessing(true);

    try {
      const detector = new ContourDetector();
      const result = await detector.processImage(file, threshold);

      setOriginalImage(result.originalImage);
      setProcessedImage(result.processedImage);
      setContours(result.contours);
    } catch (error) {
      console.error('Error processing image:', error);
      alert('Failed to process image');
    } finally {
      setIsProcessing(false);
    }
  };

  const handleThresholdChange = async (newThreshold: number) => {
    setThreshold(newThreshold);

    if (!fileInputRef.current?.files?.[0]) return;

    setIsProcessing(true);

    try {
      const detector = new ContourDetector();
      const result = await detector.processImage(fileInputRef.current.files[0], newThreshold);

      setOriginalImage(result.originalImage);
      setProcessedImage(result.processedImage);
      setContours(result.contours);
    } catch (error) {
      console.error('Error processing image:', error);
    } finally {
      setIsProcessing(false);
    }
  };

  const handleDownload = () => {
    if (!processedImage) return;

    const link = document.createElement('a');
    link.href = processedImage;
    link.download = `contours_${fileName}`;
    link.click();
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100">
      <div className="max-w-7xl mx-auto px-4 py-8">
        <header className="text-center mb-12">
          <div className="flex items-center justify-center gap-3 mb-4">
            <Scan className="w-12 h-12 text-slate-700" />
            <h1 className="text-5xl font-bold text-slate-800">Find Logo Contours</h1>
          </div>
          <p className="text-lg text-slate-600 max-w-2xl mx-auto">
            Upload a brand image to automatically detect and highlight logo contours with advanced edge detection
          </p>
        </header>

        <div className="bg-white rounded-2xl shadow-xl p-8 mb-8">
          <div className="flex flex-col items-center gap-6">
            <input
              ref={fileInputRef}
              type="file"
              accept="image/*"
              onChange={handleFileSelect}
              className="hidden"
              id="file-input"
            />

            <label
              htmlFor="file-input"
              className="flex flex-col items-center justify-center w-full h-64 border-3 border-dashed border-slate-300 rounded-xl hover:border-slate-400 cursor-pointer transition-all hover:bg-slate-50 group"
            >
              <div className="flex flex-col items-center justify-center gap-4">
                <Upload className="w-16 h-16 text-slate-400 group-hover:text-slate-500 transition-colors" />
                <div className="text-center">
                  <p className="text-xl font-semibold text-slate-700 mb-1">
                    Click to upload brand image
                  </p>
                  <p className="text-sm text-slate-500">PNG, JPG, or GIF up to 10MB</p>
                </div>
              </div>
            </label>

            {fileName && (
              <div className="flex items-center gap-2 text-slate-600 bg-slate-50 px-4 py-2 rounded-lg">
                <ImageIcon className="w-5 h-5" />
                <span className="font-medium">{fileName}</span>
              </div>
            )}

            <div className="w-full max-w-md">
              <div className="flex items-center gap-4 mb-3">
                <SlidersHorizontal className="w-5 h-5 text-slate-600" />
                <label className="text-sm font-semibold text-slate-700">
                  Detection Threshold: {threshold}
                </label>
              </div>
              <input
                type="range"
                min="50"
                max="200"
                value={threshold}
                onChange={(e) => handleThresholdChange(Number(e.target.value))}
                className="w-full h-2 bg-slate-200 rounded-lg appearance-none cursor-pointer accent-slate-700"
                disabled={isProcessing || !originalImage}
              />
              <div className="flex justify-between text-xs text-slate-500 mt-1">
                <span>More Sensitive</span>
                <span>Less Sensitive</span>
              </div>
            </div>
          </div>
        </div>

        {isProcessing && (
          <div className="flex items-center justify-center gap-3 py-12">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-slate-700"></div>
            <span className="text-lg text-slate-600 font-medium">Processing image...</span>
          </div>
        )}

        {!isProcessing && originalImage && processedImage && (
          <div className="space-y-8">
            <div className="bg-white rounded-2xl shadow-xl p-8">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-bold text-slate-800">Detection Results</h2>
                <button
                  onClick={handleDownload}
                  className="flex items-center gap-2 px-6 py-3 bg-slate-700 text-white rounded-lg hover:bg-slate-800 transition-colors font-medium shadow-md"
                >
                  <Download className="w-5 h-5" />
                  Download Result
                </button>
              </div>

              <div className="grid md:grid-cols-2 gap-8">
                <div className="space-y-3">
                  <h3 className="text-lg font-semibold text-slate-700 flex items-center gap-2">
                    <ImageIcon className="w-5 h-5" />
                    Original Image
                  </h3>
                  <div className="border-2 border-slate-200 rounded-xl overflow-hidden bg-slate-50">
                    <img
                      src={originalImage}
                      alt="Original"
                      className="w-full h-auto"
                    />
                  </div>
                </div>

                <div className="space-y-3">
                  <h3 className="text-lg font-semibold text-slate-700 flex items-center gap-2">
                    <Scan className="w-5 h-5" />
                    Detected Contours
                  </h3>
                  <div className="border-2 border-slate-200 rounded-xl overflow-hidden bg-slate-50">
                    <img
                      src={processedImage}
                      alt="Processed"
                      className="w-full h-auto"
                    />
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white rounded-2xl shadow-xl p-8">
              <h2 className="text-2xl font-bold text-slate-800 mb-6">
                Contour Analysis
              </h2>

              {contours.length === 0 ? (
                <p className="text-slate-600 text-center py-8">
                  No contours detected. Try adjusting the threshold.
                </p>
              ) : (
                <div className="space-y-4">
                  <p className="text-slate-600 mb-4">
                    Found <span className="font-bold text-slate-800">{contours.length}</span> logo contours
                  </p>

                  <div className="grid gap-4">
                    {contours.map((contour, index) => (
                      <div
                        key={index}
                        className="flex items-center justify-between p-4 bg-slate-50 rounded-lg border border-slate-200 hover:border-slate-300 transition-colors"
                      >
                        <div className="flex items-center gap-4">
                          <div
                            className="w-8 h-8 rounded-full flex items-center justify-center text-white font-bold text-sm shadow-md"
                            style={{
                              backgroundColor: [
                                '#ef4444',
                                '#10b981',
                                '#3b82f6',
                                '#f59e0b',
                                '#ec4899',
                                '#06b6d4',
                                '#f97316',
                                '#8b5cf6',
                                '#14b8a6',
                                '#f87171'
                              ][index % 10]
                            }}
                          >
                            {index + 1}
                          </div>
                          <div>
                            <p className="font-semibold text-slate-800">Contour {index + 1}</p>
                            <p className="text-sm text-slate-600">
                              {contour.points.length} boundary points
                            </p>
                          </div>
                        </div>

                        <div className="text-right">
                          <p className="text-sm font-medium text-slate-700">
                            {contour.bounds.width} × {contour.bounds.height}px
                          </p>
                          <p className="text-xs text-slate-500">
                            Area: {contour.area.toLocaleString()}px²
                          </p>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
